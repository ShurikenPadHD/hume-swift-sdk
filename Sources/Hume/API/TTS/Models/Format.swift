// This file is generated by generator.ts

public enum Format: Codable, Hashable {
  case mp3(FormatMp3)
  case pcm(FormatPcm)
  case wav(FormatWav)

  private enum CodingKeys: String, CodingKey {
    case type
  }
  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    let typeValue = try container.decode(String.self, forKey: .type)
    switch typeValue {
    case "mp3": self = .mp3(try FormatMp3(from: decoder))
    case "pcm": self = .pcm(try FormatPcm(from: decoder))
    case "wav": self = .wav(try FormatWav(from: decoder))
    default:
      throw DecodingError.dataCorruptedError(
        forKey: .type, in: container, debugDescription: "Unexpected type value: \(typeValue)")
    }
  }
  public func encode(to encoder: Encoder) throws {
    switch self {
    case .mp3(let value): try value.encode(to: encoder)
    case .pcm(let value): try value.encode(to: encoder)
    case .wav(let value): try value.encode(to: encoder)
    }
  }
}
